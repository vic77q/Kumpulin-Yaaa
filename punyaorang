local library = {
    windowcount = 0;
}

local dragger = {};
local resizer = {};

do
    local mouse = game:GetService("Players").LocalPlayer:GetMouse();
    local inputService = game:GetService('UserInputService');
    local heartbeat = game:GetService("RunService").Heartbeat;

    function dragger.new(frame)
        local s, event = pcall(function()
            return frame.MouseEnter
        end)

        if s then
            frame.Active = true;

            event:connect(function()
                local input = frame.InputBegan:connect(function(key)
                    if key.UserInputType == Enum.UserInputType.MouseButton1 or key.UserInputType == Enum.UserInputType.Touch then
                        local objectPosition = Vector2.new(mouse.X - frame.AbsolutePosition.X, mouse.Y - frame.AbsolutePosition.Y);
                        while heartbeat:wait() and inputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                            frame.Position = UDim2.new(0, mouse.X - objectPosition.X, 0, mouse.Y - objectPosition.Y);
                        end
                    end
                end)

                local leave;
                leave = frame.MouseLeave:connect(function()
                    input:disconnect();
                    leave:disconnect();
                end)
            end)
        end
    end

    function resizer.new(p, s)
        p:GetPropertyChangedSignal('AbsoluteSize'):connect(function()
            s.Size = UDim2.new(s.Size.X.Scale, s.Size.X.Offset, s.Size.Y.Scale, p.AbsoluteSize.Y);
        end)
    end
end

local defaults = {
    txtcolor = Color3.fromRGB(255, 255, 255),
    underline = Color3.fromRGB(0, 255, 140),
    barcolor = Color3.fromRGB(40, 40, 40),
    bgcolor = Color3.fromRGB(30, 30, 30),
}

function library:Create(class, props)
    local object = Instance.new(class);

    for i, prop in next, props do
        if i ~= "Parent" then
            object[i] = prop;
        end
    end

    object.Parent = props.Parent;
    return object;
end

function library:CreateWindow(options)
    assert(options.text, "Nama Window harus diisi!");

    local window = {
        count = 0;
        toggles = {};
        closed = false;
    }

    local options = options or {};
    setmetatable(options, {__index = defaults})

    self.windowcount = self.windowcount + 1;

    if not library.gui then
        library.gui = self:Create("ScreenGui", {Name = "UILibrary", Parent = game:GetService("CoreGui")})
    end

    window.frame = self:Create("Frame", {
        Name = options.text;
        Parent = self.gui;
        Active = true;
        BackgroundTransparency = 0;
        Size = UDim2.new(0, 200, 0, 30);
        Position = UDim2.new(0.5, -100, 0.2, 0);
        BackgroundColor3 = options.barcolor;
        BorderSizePixel = 0;
    })

    window.container = self:Create('Frame', {
        Name = 'Container';
        Parent = window.frame;
        BorderSizePixel = 0;
        BackgroundColor3 = options.bgcolor;
        Position = UDim2.new(0, 0, 1, 0);
        Size = UDim2.new(1, 0, 0, 25);
        ClipsDescendants = true;
    })

    window.organizer = self:Create('UIListLayout', {
        Name = 'Sorter';
        SortOrder = Enum.SortOrder.LayoutOrder;
        Parent = window.container;
    })

    window.padder = self:Create('UIPadding', {
        Name = 'Padding';
        PaddingLeft = UDim.new(0, 10);
        PaddingTop = UDim.new(0, 5);
        Parent = window.container;
    })

    self:Create("Frame", {
        Name = 'Underline';
        Size = UDim2.new(1, 0, 0, 1);
        Position = UDim2.new(0, 0, 1, -1);
        BorderSizePixel = 0;
        BackgroundColor3 = options.underline;
        Parent = window.frame;
    })

    local togglebutton = self:Create("TextButton", {
        Name = 'Toggle';
        ZIndex = 2;
        BackgroundTransparency = 1;
        Position = UDim2.new(1, -25, 0, 0);
        Size = UDim2.new(0, 25, 1, 0);
        Text = "-";
        TextSize = 17;
        TextColor3 = options.txtcolor;
        Font = Enum.Font.FredokaOne;
        Parent = window.frame;
    });

    togglebutton.MouseButton1Click:connect(function()
        window.closed = not window.closed;
        togglebutton.Text = (window.closed and "+" or "-");

        if window.closed then
            window.container.Visible = false;
        else
            window.container.Visible = true;
        end
    end)
    local closeButton = library:Create("TextButton", {
        Name = 'Close';
        ZIndex = 2;
        BackgroundTransparency = 1;
        Position = UDim2.new(1, -50, 0, 0);
        Size = UDim2.new(0, 25, 1, 0);
        Text = "X";
        TextSize = 17;
        TextColor3 = Color3.fromRGB(255, 25, 25);
        Font = Enum.Font.FredokaOne;
        Parent = window.frame;
    });

    closeButton.MouseButton1Click:connect(function()

        if library.gui then
            library.gui:Destroy()
        end

        pcall(function()
            for _, connection in pairs(getconnections(game:GetService("RunService").Heartbeat))) do
                connection:Disconnect()
            end
        end)

        pcall(function()
            for _, event in pairs(getconnections(game:GetService("UserInputService").InputBegan))) do
                event:Disconnect()
            end
        end)
    end)

    return window
end

return library
